package com.studentcourse.test;
import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.studentcourse.springboot.Application;
import com.studentcourse.springboot.controller.StudentCourseController;
import com.studentcourse.springboot.entity.Course;
import com.studentcourse.springboot.entity.Student;
import com.studentcourse.springboot.repository.CourseRepository;
import com.studentcourse.springboot.repository.StudentRepository;
import com.studentcourse.springboot.services.StudentCourseService;

//@ComponentScan("com.studentcourse.*")
//@SpringBootTest(classes=StudentCourseController.class)


@RunWith(SpringRunner.class)
@WebMvcTest(StudentCourseController.class)
@ContextConfiguration(classes={Application.class})
public class StudentCourseControllerTest {
	
	@Autowired
	private MockMvc mockMvc;

	
	@MockBean
	private StudentRepository studentRepository;
	
	@MockBean
	private CourseRepository courseRepository;
	
	@MockBean
	private StudentCourseService studentCourseService;
	
	
	
	@Test
	public void testGetStudent() throws Exception {
		
		final Course course2 = new Course("Artificial Intellegence");
		final Set<Course> mockCourse =  new HashSet<Course>(){{
            add(course2);
       
        }};
		Student mockStudent = new Student("Lucky",mockCourse);
		
		Mockito.when(studentCourseService.GetStudent(Mockito.anyLong())).thenReturn(mockStudent.toString());
		//use this spesific data
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/studentcourse/getStudentById/5").accept(
				MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky"+'"'+", "+'"'+"courses"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+"}]}";
		
		System.out.println(result.getResponse().getContentAsString());
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		//expect the response
	}
	
	@Test
	public void testGetCourse() throws Exception {
		
		final Student student1 = new Student("Lucky");
		final Set<Student> mockStudent =  new HashSet<Student>(){{
            add(student1);
       
        }};
		Course mockCourse = new Course("Sejarah",mockStudent);
		
		Mockito.when(studentCourseService.GetCourse(Mockito.anyLong())).thenReturn(mockCourse.toString());
		//use this spesific data
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/studentcourse/getCourseById/5").accept(
				MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Sejarah"+'"'+", "+'"'+"students"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky"+'"'+"}]}";
		//System.out.println(result.getResponse().getContentAsString());
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		//expect the response
	}
	
	@Test
	public void testAddCourse() throws Exception {
		
		
		Course mockCourse = new Course("Sejarah");
		
		String courseJson = "{\"id\":0,\"name\":\"Sejarah\",\"student\": null}";
		
		Mockito.when(studentCourseService.addCourse(Mockito.any(Course.class))).thenReturn(mockCourse);
		//use this spesific data
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.post("/studentcourse/addCourse").accept(
				MediaType.APPLICATION_JSON).content(courseJson).contentType(MediaType.APPLICATION_JSON);


		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		//assertEquals(HttpStatus.CREATED.value(), response.getStatus());
		assertEquals("http://localhost/studentcourse/addStudent", response.getHeader(HttpHeaders.LOCATION));
	}

	
	@Test
	public void testAddStudent() throws Exception {
	
		Student mockStudent = new Student("Indah");
		
		String studentJson = "{\"id\":0,\"name\":\"indah\",\"course\": null}";
		
		Mockito.when(studentCourseService.addStudent(Mockito.any(Student.class))).thenReturn(mockStudent);
		//use this spesific data
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.post("/studentcourse/addStudent").accept(
				MediaType.APPLICATION_JSON).content(studentJson).contentType(MediaType.APPLICATION_JSON);


		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		assertEquals(HttpStatus.CREATED.value(), response.getStatus());
		assertEquals("http://localhost/studentcourse/addStudent", response.getHeader(HttpHeaders.LOCATION));
	}
	
	@Test
	public void testRegisterCourse() throws Exception {
		
		final Course course2 = new Course("Artificial Intellegence");
		final Set<Course> mockCourse =  new HashSet<Course>(){{
            add(course2);
       
        }};
		Student mockStudent = new Student("Lucky",mockCourse);
	
		Mockito.when(studentCourseService.registerCourse(Mockito.anyLong(), Mockito.anyLong())).thenReturn(mockStudent.toString());
		//use this spesific data
		
		String studentJson = "{\"id\":0,\"name\":\"indah\",\"course\": null}";
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.put("/studentcourse/registerCourse/5/6").accept(
				MediaType.APPLICATION_JSON).content(studentJson).contentType(MediaType.APPLICATION_JSON);;
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky"+'"'+", "+'"'+"courses"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+"}]}";
		//System.out.println(result.getResponse().getContentAsString());
		System.out.println("ini tes register"+expected);
		System.out.println(result.getResponse().getContentAsString());
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		//expect the response
	}
	
	@Test
	public void testDeRegisterCourse() throws Exception {
		
		final Course course2 = new Course("Artificial Intellegence");
		final Set<Course> mockCourse =  new HashSet<Course>(){{
            add(course2);
      
        }};
		Student mockStudent = new Student("Lucky",mockCourse);
	
		Mockito.when(studentCourseService.deRegisterCourse(Mockito.anyLong(), Mockito.anyLong())).thenReturn(mockStudent.toString());
		//use this spesific data
		
		//String studentJson = "{\"id\":0,\"name\":\"indah\",\"course\": null}";
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.put("/studentcourse/deRegisterCourse/5/6").accept(
				MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky"+'"'+", "+'"'+"courses"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+"}]}";
		System.out.println("ini tes deregis "+expected);
		System.out.println(result.getResponse().getContentAsString());
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		//expect the response
	}
	
	@Test
	public void testReport() throws Exception {
		
		final Student student1 = new Student("Lucky");
		final Set<Student> mockStudent =  new HashSet<Student>(){{
            add(student1);
       
        }};
		Course mockCourse = new Course("Sejarah",mockStudent);
		
		Mockito.when(studentCourseService.Report()).thenReturn(mockCourse.toString());
		//use this spesific data
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/studentcourse/report").accept(
				MediaType.APPLICATION_JSON);
	
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Sejarah"+'"'+", "+'"'+"students"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky"+'"'+"}]}";
	//	System.out.println("ini report "+result.getResponse().getContentAsString());
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		//expect the response
	}

	@Test
	public void testUpdateCourse() throws Exception {
		
		final Student student1 = new Student("Lucky");
		final Set<Student> mockStudent =  new HashSet<Student>(){{
            add(student1);
       
        }};
		Course mockCourse = new Course("History",mockStudent);
		
		Mockito.when(studentCourseService.updateCourse(Mockito.anyLong(), Mockito.any(Course.class))).thenReturn(mockCourse.toString());
		//use this spesific data
		
		String courseJson = "{\"id\":0,\"name\":\"History\"}";
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.put("/studentcourse/updateCourse/5").accept(
				MediaType.APPLICATION_JSON).content(courseJson).contentType(MediaType.APPLICATION_JSON);;
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"History"+'"'+", "+'"'+"students"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky"+'"'+"}]}";
		System.out.println("ini tes updateCourse "+expected);
		System.out.println(result.getResponse().getContentAsString());
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		//expect the response
	}
	
	@Test
	public void testUpdateStudent() throws Exception {
	

		final Course course2 = new Course("Artificial Intellegence");
		final Set<Course> mockCourse =  new HashSet<Course>(){{
            add(course2);
       
        }};
		Student mockStudent = new Student("Lucky Putra",mockCourse);
		
		Mockito.when(studentCourseService.updateStudent(Mockito.anyLong(), Mockito.any(Student.class))).thenReturn(mockStudent.toString());
		//use this spesific data
		
		String courseJson = "{\"id\":0,\"name\":\"Lucky Putra\"}";
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.put("/studentcourse/updateStudent/5").accept(
				MediaType.APPLICATION_JSON).content(courseJson).contentType(MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky Putra"+'"'+", "+'"'+"courses"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+"}]}";
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		
	}
	
	@Test
	public void testListAllStudent() throws Exception {
	
		

		final Course course2 = new Course("Artificial Intellegence");
		final Set<Course> mockCourse =  new HashSet<Course>(){{
            add(course2);
        }};
		Student mockStudent1 = new Student("Lucky Putra",mockCourse);
	
		final Course course3 = new Course("Artificial Intellegence");
		final Set<Course> mockCourse2 =  new HashSet<Course>(){{
            add(course3);
        }};
		Student mockStudent2 = new Student("Lucky Valatehan",mockCourse);
		
		String mockResult = "["+mockStudent1+","+mockStudent2+"]";
				
		Mockito.when(studentCourseService.listAllStudent()).thenReturn(mockResult);
		//use this spesific data
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/studentcourse/listAllStudent").accept(
				MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky Putra"+'"'+", "+'"'+"courses"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+
								"}]},{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky Valatehan"+'"'+", "+'"'+"courses"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+"}]}]";
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		
	}
	
	@Test
	public void testListAllCourse() throws Exception {
	
		final Student student1 = new Student("Lucky Putra");
		final Set<Student> mockStudent1 =  new HashSet<Student>(){{
            add(student1);
        }};
		Course mockCourse1 = new Course("Artificial Intellegence",mockStudent1);
		
		final Student student2 = new Student("Lucky Valatehan");
		final Set<Student> mockStudent2 =  new HashSet<Student>(){{
            add(student2);
        }};
		Course mockCourse2 = new Course("History",mockStudent2);
		
		
		String mockResult = "["+mockCourse1+","+mockCourse2+"]";
				
		Mockito.when(studentCourseService.listAllCourse()).thenReturn(mockResult);
		//use this spesific data

		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/studentcourse/listAllCourse").accept(
				MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+", "+'"'+"students"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky Putra"+'"'+
				"}]},{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"History"+'"'+", "+'"'+"students"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky Valatehan"+'"'+"}]}]";
		
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
		
	}
	
	@Test
	public void testGetStudentService() throws Exception {
		
		final Course course2 = new Course("Artificial Intellegence");
		final Set<Course> mockCourse =  new HashSet<Course>(){{
            add(course2);
      
        }};
		Student mockStudent = new Student("Lucky",mockCourse);
		
		Mockito.when(studentRepository.findOne(Mockito.anyLong())).thenReturn(mockStudent);
		//use this spesific data
		
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/studentcourse/getStudentById/5").accept(
				MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		String expected = "{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Lucky"+'"'+", "+'"'+"courses"+'"'+":[{"+'"'+"id"+'"'+":"+'"'+"0"+'"'+", "+'"'+"name"+'"'+":"+'"'+"Artificial Intellegence"+'"'+"}]}";
		
		System.out.println("ini response "+result.getResponse().getContentAsString());
	
		JSONAssert.assertEquals(expected, result.getResponse().toString(), false);
		//expect the response
	}
}
